游리 The display Property

    The display property is the most important CSS property for controlling layout.
    The display property is used to specify how an element is shown on a web page.
    Every HTML element has a default display value, depending on what type of element it is. The default display value for most elements is block or inline.
    The display property is used to change the default display behavior of HTML elements.

游리 Block-level Elements

    A block-level element ALWAYS starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).

    The <div> element is a block-level element.
    Examples of block-level elements:

    <div>
    <h1> - <h6>
    <p>
    <form>
    <header>
    <footer>
    <section>

游리 Inline Elements

    An inline element DOES NOT start on a new line and only takes up as much width as necessary.

    This is an inline <span> element inside a paragraph.

    Examples of inline elements:

    <span>
    <a>
    <img>

游리 The display Property Values

    The display property has many values:

    Value	            Description

    inline	            Displays an element as an inline element
    block	            Displays an element as a block element
    contents	        Makes the container disappear, making the child elements children of the element the next level up in the DOM
    flex	            Displays an element as a block-level flex container
    grid	            Displays an element as a block-level grid container
    inline-block	    Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values
    inline-flex	        Displays an element as an inline-level flex container
    inline-grid	        Displays an element as an inline-level grid container
    inline-table	    The element is displayed as an inline-level table
    list-item	        Let the element behave like a <li> element
    run-in	            Displays an element as either block or inline, depending on context
    table	            Let the element behave like a <table> element
    table-caption	    Let the element behave like a <caption> element
    table-column-group	Let the element behave like a <colgroup> element
    table-header-group	Let the element behave like a <thead> element
    table-footer-group	Let the element behave like a <tfoot> element
    table-row-group	    Let the element behave like a <tbody> element
    table-cell	        Let the element behave like a <td> element
    table-column	    Let the element behave like a <col> element
    table-row	        Let the element behave like a <tr> element
    none	            The element is completely removed
    initial	            Sets this property to its default value
    inherit	            Inherits this property from its parent element

游리 The position Property

    The position property specifies the type of positioning method used for an element (static, relative, fixed, absolute or sticky).
    The position property specifies the type of positioning method used for an element.

    There are five different position values:

    static
    relative
    fixed
    absolute
    sticky
    Elements are then positioned using the top, bottom, left, and right properties. However, these properties will not work unless the position property is set first. They also work differently depending on the position value.

游리 position: static;

    HTML elements are positioned static by default.

    Static positioned elements are not affected by the top, bottom, left, and right properties.

    An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page:

    This <div> element has position: static;
    Here is the CSS that is used:

    div.static {
        position: static;
        border: 3px solid #73AD21;
    }

游리 position: relative;

    An element with position: relative; is positioned relative to its normal position.

    Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.

    This <div> element has position: relative;
    Here is the CSS that is used:

    div.relative {
        position: relative;
        left: 30px;
        border: 3px solid #73AD21;
    }

游리 position: fixed;

    An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
    A fixed element does not leave a gap in the page where it would normally have been located.
    Notice the fixed element in the lower-right corner of the page. Here is the CSS that is used:

    div.fixed {
        position: fixed;
        bottom: 0;
        right: 0;
        width: 300px;
        border: 3px solid #73AD21;
    }

游리 position: absolute;

    An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).
    However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
    Note: Absolute positioned elements are removed from the normal flow, and can overlap elements.

    Here is a simple example:

    div.relative {
        position: relative;
        width: 400px;
        height: 200px;
        border: 3px solid #73AD21;
    }

    div.absolute {
        position: absolute;
        top: 80px;
        right: 0;
        width: 200px;
        height: 100px;
        border: 3px solid #73AD21;
    }

游리 position: sticky;

    An element with position: sticky; is positioned based on the user's scroll position.
    A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like position:fixed).

    For example:

        div.sticky {
            position: -webkit-sticky; /* Safari */
            position: sticky;
            top: 0;
            background-color: green;
            border: 2px solid #4CAF50;
        }